
"use client";

import { useState } from 'react';
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { PageHeader } from '@/components/shared/page-header';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Loader2, FileSignature, Wand2 } from 'lucide-react';
import { useToast } from "@/hooks/use-toast";
import { generateConsentForm } from '@/ai/flows/generate-consent-form-flow'; // Assuming this is the server action wrapper

const consentFormSchema = z.object({
  patientName: z.string().min(1, "Patient name is required."),
  procedureName: z.string().min(1, "Procedure name is required."),
  doctorName: z.string().min(1, "Doctor name is required."),
});

type ConsentFormData = z.infer<typeof consentFormSchema>;

export default function TemplatesPage() {
  const [generatedConsent, setGeneratedConsent] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const form = useForm<ConsentFormData>({
    resolver: zodResolver(consentFormSchema),
    defaultValues: {
      patientName: "",
      procedureName: "",
      doctorName: "Dr. Sarah Johnson", // Pre-fill with common doctor or leave empty
    },
  });

  const onSubmit = async (data: ConsentFormData) => {
    setIsLoading(true);
    setGeneratedConsent(null);
    try {
      // Directly call the server action (flow wrapper)
      const result = await generateConsentForm(data);
      if (result && result.consentFormText) {
        setGeneratedConsent(result.consentFormText);
        toast({
          title: "Consent Form Generated",
          description: "The consent form has been successfully generated by AI.",
        });
      } else {
        throw new Error("AI did not return consent form text.");
      }
    } catch (error) {
      console.error("Error generating consent form:", error);
      toast({
        title: "Generation Failed",
        description: error instanceof Error ? error.message : "An unknown error occurred while generating the consent form.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="container mx-auto py-2">
      <PageHeader title="Document Templates" description="Generate patient consent forms and other templates." />
      <div className="grid md:grid-cols-2 gap-6 mt-6">
        <Card>
          <CardHeader>
            <CardTitle className="font-headline flex items-center"><FileSignature className="mr-2 h-5 w-5 text-primary"/>Generate Patient Consent Form</CardTitle>
            <CardDescription>Enter the details below to generate a consent form using AI.</CardDescription>
          </CardHeader>
          <CardContent>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                <FormField
                  control={form.control}
                  name="patientName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Patient Full Name</FormLabel>
                      <FormControl>
                        <Input placeholder="e.g., John Doe" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="procedureName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Procedure Name</FormLabel>
                      <FormControl>
                        <Input placeholder="e.g., Kidney Biopsy" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="doctorName"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Doctor Full Name</FormLabel>
                      <FormControl>
                        <Input placeholder="e.g., Dr. Emily Carter" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <Button type="submit" disabled={isLoading} className="w-full">
                  {isLoading ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ) : (
                    <Wand2 className="mr-2 h-4 w-4" />
                  )}
                  Generate Consent
                </Button>
              </form>
            </Form>
          </CardContent>
        </Card>
        
        <Card className="md:col-span-1">
          <CardHeader>
            <CardTitle className="font-headline">Generated Consent Form</CardTitle>
            <CardDescription>Review the AI-generated text below. Copy or print as needed.</CardDescription>
          </CardHeader>
          <CardContent>
            {isLoading && (
                <div className="flex items-center justify-center h-40">
                    <Loader2 className="h-8 w-8 animate-spin text-primary" />
                    <p className="ml-2 text-muted-foreground">Generating...</p>
                </div>
            )}
            {generatedConsent ? (
              <Textarea value={generatedConsent} readOnly rows={20} className="bg-muted/20 text-sm" />
            ) : (
              !isLoading && <p className="text-muted-foreground text-center py-10">The generated consent form will appear here.</p>
            )}
            {generatedConsent && (
                <Button onClick={() => navigator.clipboard.writeText(generatedConsent)} variant="outline" className="mt-4 w-full">
                    Copy to Clipboard
                </Button>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
